buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:0.7.+'
    }
}
apply plugin: 'android-library'
apply plugin: 'maven'
apply plugin: 'eclipse'

repositories {
// Gradle 1.9 has a bug that doesn't honor mavenLocal. Gradle 1.10 (the current release) has a bug that doesn't
    // support Android. So the following is a temporary work around for the 1.9 bug until we get a release of Gradle
    // that both supports Android and mavenLocal(). Fix taken from: https://plus.google.com/+XavierDucrohet/posts/hF7W59uZ7rX
    // Note that the fix used System.env.HOME but for some reason that didn't work so I switched it to System.getProperty('user.home') which
    // does work.
    //mavenLocal()
    maven { url "${System.getProperty('user.home')}/.m2/repository" }
    mavenCentral()
}

dependencies {

    compile 'com.android.support:support-v4:13.0.+'

    // this library is only needed by test code (95% certain), and therefore
    // instrumentTestCompile is used rather than compile.
    instrumentTestCompile 'commons-io:commons-io:2.0.1'

    // as discovered by trial and error, the build will fail if "compile" is
    // used: Error: duplicate files during packaging of APK.  I guess it is
    // being implicitly included by being in the libs folder, and then "double included"
    // because of a "compile" directive to explicitly include the jar.
    instrumentTestCompile fileTree(dir: 'libs', include: 'td_collator_so.jar')

    compile 'org.codehaus.jackson:jackson-core-asl:1.9.2'
    compile 'org.codehaus.jackson:jackson-mapper-asl:1.9.2'
}

android {
    compileSdkVersion 17
    buildToolsVersion "17.0.0"

    defaultConfig {
        minSdkVersion 9
        targetSdkVersion 16
    }
}

task createMavenDirectory(type: Exec) {

    ext {
        uploadUser = System.getenv("UPLOAD_USERNAME") + ":" + System.getenv("UPLOAD_PASSWORD")
        mkcolPath = System.getenv("UPLOAD_MAVEN_REPO_URL") + "com/couchbase/cblite/CBLite/" + System.getenv("UPLOAD_VERSION_CBLITE") + "/"
    }
    commandLine "curl", "--user", uploadUser, "-X", "MKCOL", mkcolPath
}

// this hack is only needed for apache mod_dav based Maven repo's like file.couchbase.com.  otherwise, skip it
createMavenDirectory.onlyIf { System.getenv("UPLOAD_MAVEN_REPO_URL").contains("files") }

task uploadArchivesWrapper(dependsOn: createMavenDirectory) << {
    uploadArchives.execute()
}

uploadArchives {
    repositories {
        mavenDeployer {
            if (System.getProperty('localOnlyBuild', "false") == "true") {
                repository url: 'file://' + new File(System.getProperty('user.home'), '.m2/repository').absolutePath
            } else {
                repository(url: System.getenv("UPLOAD_MAVEN_REPO_URL")) {
                    authentication(userName: System.getenv("UPLOAD_USERNAME"), password: System.getenv("UPLOAD_PASSWORD"))
                }
            }

            pom.version = System.properties['UPLOAD_VERSION_CBLITE']
            pom.groupId = 'com.couchbase.lite'
            pom.artifactId = 'Manager'
            pom.project {
                licenses {
                    license {
                        name 'Couchbase Community Edition License Agreement'
                        url 'http://www.couchbase.com/agreement/community'
                        distribution 'repo'
                    }
                }
            }
        }
    }
}

task install(dependsOn: uploadArchives)

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

artifacts {
    archives sourcesJar
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.9'
}
